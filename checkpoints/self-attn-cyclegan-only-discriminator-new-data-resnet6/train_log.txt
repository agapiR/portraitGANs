----------------- Options ---------------
               batch_size: 1                             
                    beta1: 0.5                           
          checkpoints_dir: ./checkpoints                 
           continue_train: False                         
                crop_size: 256                           
                 dataroot: face_data/multistyle/         	[default: None]
             dataset_mode: unaligned                     
                direction: AtoB                          
              display_env: main                          
             display_freq: 400                           
               display_id: 1                             
            display_ncols: 4                             
             display_port: 8097                          
           display_server: http://localhost              
          display_winsize: 256                           
                    epoch: latest                        
              epoch_count: 1                             
                 gan_mode: lsgan                         
                  gpu_ids: [1]                           	[default: 0]
                init_gain: 0.02                          
                init_type: normal                        
                 input_nc: 3                             
                  isTrain: True                          	[default: None]
                 lambda_A: 10.0                          
                 lambda_B: 10.0                          
          lambda_identity: 0.5                           
                load_iter: 0                             	[default: 0]
                load_size: 286                           
                      log: True                          	[default: False]
                       lr: 0.0002                        
           lr_decay_iters: 50                            
                lr_policy: linear                        
         max_dataset_size: inf                           
                    model: cycle_gan                     
               n_layers_D: 3                             
                     name: self-attn-cyclegan-only-discriminator-new-data-resnet6	[default: experiment_name]
                      ndf: 64                            
                     netD: basic                         
                     netG: resnet_6blocks                	[default: resnet_9blocks]
                      ngf: 64                            
                    niter: 100                           
              niter_decay: 100                           
               no_dropout: True                          
                  no_flip: False                         
                  no_html: False                         
                     norm: instance                      
              num_threads: 4                             
                output_nc: 3                             
                    phase: train                         
                pool_size: 50                            
               preprocess: resize_and_crop               
               print_freq: 100                           
             save_by_iter: False                         
          save_epoch_freq: 5                             
         save_latest_freq: 5000                          
           self_attention: True                          	[default: False]
           serial_batches: False                         
                   suffix:                               
         update_html_freq: 1000                          
                  verbose: False                         
----------------- End -------------------
dataset [UnalignedDataset] was created
The number of training images = 800
initialize network with normal
-------------- netG_A ----------------
DataParallel(
  (module): ResnetGenerator(
    (model): Sequential(
      (0): ReflectionPad2d((3, 3, 3, 3))
      (1): Conv2d(3, 64, kernel_size=(7, 7), stride=(1, 1))
      (2): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
      (3): ReLU(inplace)
      (4): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      (5): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
      (6): ReLU(inplace)
      (7): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      (8): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
      (9): ReLU(inplace)
      (10): ResnetBlock(
        (conv_block): Sequential(
          (0): ReflectionPad2d((1, 1, 1, 1))
          (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))
          (2): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
          (3): ReLU(inplace)
          (4): ReflectionPad2d((1, 1, 1, 1))
          (5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))
          (6): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
        )
      )
      (11): ResnetBlock(
        (conv_block): Sequential(
          (0): ReflectionPad2d((1, 1, 1, 1))
          (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))
          (2): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
          (3): ReLU(inplace)
          (4): ReflectionPad2d((1, 1, 1, 1))
          (5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))
          (6): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
        )
      )
      (12): ResnetBlock(
        (conv_block): Sequential(
          (0): ReflectionPad2d((1, 1, 1, 1))
          (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))
          (2): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
          (3): ReLU(inplace)
          (4): ReflectionPad2d((1, 1, 1, 1))
          (5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))
          (6): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
        )
      )
      (13): ResnetBlock(
        (conv_block): Sequential(
          (0): ReflectionPad2d((1, 1, 1, 1))
          (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))
          (2): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
          (3): ReLU(inplace)
          (4): ReflectionPad2d((1, 1, 1, 1))
          (5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))
          (6): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
        )
      )
      (14): ResnetBlock(
        (conv_block): Sequential(
          (0): ReflectionPad2d((1, 1, 1, 1))
          (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))
          (2): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
          (3): ReLU(inplace)
          (4): ReflectionPad2d((1, 1, 1, 1))
          (5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))
          (6): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
        )
      )
      (15): ResnetBlock(
        (conv_block): Sequential(
          (0): ReflectionPad2d((1, 1, 1, 1))
          (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))
          (2): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
          (3): ReLU(inplace)
          (4): ReflectionPad2d((1, 1, 1, 1))
          (5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))
          (6): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
        )
      )
      (16): ConvTranspose2d(256, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1))
      (17): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
      (18): ReLU(inplace)
      (19): ConvTranspose2d(128, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1))
      (20): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
      (21): ReLU(inplace)
      (22): ReflectionPad2d((3, 3, 3, 3))
      (23): Conv2d(64, 3, kernel_size=(7, 7), stride=(1, 1))
      (24): Tanh()
    )
  )
)
initialize network with normal
-------------- netG_B ----------------
DataParallel(
  (module): ResnetGenerator(
    (model): Sequential(
      (0): ReflectionPad2d((3, 3, 3, 3))
      (1): Conv2d(3, 64, kernel_size=(7, 7), stride=(1, 1))
      (2): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
      (3): ReLU(inplace)
      (4): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      (5): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
      (6): ReLU(inplace)
      (7): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      (8): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
      (9): ReLU(inplace)
      (10): ResnetBlock(
        (conv_block): Sequential(
          (0): ReflectionPad2d((1, 1, 1, 1))
          (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))
          (2): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
          (3): ReLU(inplace)
          (4): ReflectionPad2d((1, 1, 1, 1))
          (5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))
          (6): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
        )
      )
      (11): ResnetBlock(
        (conv_block): Sequential(
          (0): ReflectionPad2d((1, 1, 1, 1))
          (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))
          (2): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
          (3): ReLU(inplace)
          (4): ReflectionPad2d((1, 1, 1, 1))
          (5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))
          (6): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
        )
      )
      (12): ResnetBlock(
        (conv_block): Sequential(
          (0): ReflectionPad2d((1, 1, 1, 1))
          (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))
          (2): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
          (3): ReLU(inplace)
          (4): ReflectionPad2d((1, 1, 1, 1))
          (5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))
          (6): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
        )
      )
      (13): ResnetBlock(
        (conv_block): Sequential(
          (0): ReflectionPad2d((1, 1, 1, 1))
          (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))
          (2): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
          (3): ReLU(inplace)
          (4): ReflectionPad2d((1, 1, 1, 1))
          (5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))
          (6): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
        )
      )
      (14): ResnetBlock(
        (conv_block): Sequential(
          (0): ReflectionPad2d((1, 1, 1, 1))
          (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))
          (2): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
          (3): ReLU(inplace)
          (4): ReflectionPad2d((1, 1, 1, 1))
          (5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))
          (6): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
        )
      )
      (15): ResnetBlock(
        (conv_block): Sequential(
          (0): ReflectionPad2d((1, 1, 1, 1))
          (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))
          (2): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
          (3): ReLU(inplace)
          (4): ReflectionPad2d((1, 1, 1, 1))
          (5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))
          (6): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
        )
      )
      (16): ConvTranspose2d(256, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1))
      (17): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
      (18): ReLU(inplace)
      (19): ConvTranspose2d(128, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1))
      (20): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
      (21): ReLU(inplace)
      (22): ReflectionPad2d((3, 3, 3, 3))
      (23): Conv2d(64, 3, kernel_size=(7, 7), stride=(1, 1))
      (24): Tanh()
    )
  )
)
initialize network with normal
-------------- netD_A ----------------
DataParallel(
  (module): NLayerDiscriminator(
    (model): Sequential(
      (0): Conv2d(3, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
      (1): LeakyReLU(negative_slope=0.2, inplace)
      (2): Conv2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
      (3): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
      (4): LeakyReLU(negative_slope=0.2, inplace)
      (5): SelfAttentionBlock(
        (query_conv): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1))
        (key_conv): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1))
        (value_conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        (softmax): Softmax()
      )
      (6): Conv2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
      (7): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
      (8): LeakyReLU(negative_slope=0.2, inplace)
      (9): Conv2d(64, 512, kernel_size=(4, 4), stride=(1, 1), padding=(1, 1))
      (10): InstanceNorm2d(512, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
      (11): LeakyReLU(negative_slope=0.2, inplace)
      (12): Conv2d(512, 1, kernel_size=(4, 4), stride=(1, 1), padding=(1, 1))
    )
  )
)
initialize network with normal
-------------- netD_B ----------------
DataParallel(
  (module): NLayerDiscriminator(
    (model): Sequential(
      (0): Conv2d(3, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
      (1): LeakyReLU(negative_slope=0.2, inplace)
      (2): Conv2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
      (3): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
      (4): LeakyReLU(negative_slope=0.2, inplace)
      (5): SelfAttentionBlock(
        (query_conv): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1))
        (key_conv): Conv2d(64, 8, kernel_size=(1, 1), stride=(1, 1))
        (value_conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        (softmax): Softmax()
      )
      (6): Conv2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
      (7): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
      (8): LeakyReLU(negative_slope=0.2, inplace)
      (9): Conv2d(64, 512, kernel_size=(4, 4), stride=(1, 1), padding=(1, 1))
      (10): InstanceNorm2d(512, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
      (11): LeakyReLU(negative_slope=0.2, inplace)
      (12): Conv2d(512, 1, kernel_size=(4, 4), stride=(1, 1), padding=(1, 1))
    )
  )
)
model [CycleGANModel] was created
---------- Networks initialized -------------
[Network G_A] Total number of parameters : 7.838 M
[Network G_B] Total number of parameters : 7.838 M
[Network D_A] Total number of parameters : 0.673 M
[Network D_B] Total number of parameters : 0.673 M
-----------------------------------------------
create web directory ./checkpoints/self-attn-cyclegan-only-discriminator-new-data-resnet6/web...
Begin Training---------------->
(epoch: 1, iters: 100, time: 1.379, data: 0.212) D_A: 0.352 G_A: 0.375 cycle_A: 2.311 idt_A: 1.139 D_B: 0.403 G_B: 0.406 cycle_B: 2.432 idt_B: 1.186 
(epoch: 1, iters: 200, time: 1.367, data: 0.002) D_A: 0.392 G_A: 0.358 cycle_A: 1.735 idt_A: 1.098 D_B: 0.342 G_B: 0.326 cycle_B: 2.370 idt_B: 0.875 
(epoch: 1, iters: 300, time: 1.377, data: 0.002) D_A: 0.317 G_A: 0.404 cycle_A: 3.020 idt_A: 1.061 D_B: 0.305 G_B: 0.482 cycle_B: 2.222 idt_B: 1.392 
(epoch: 1, iters: 400, time: 1.833, data: 0.003) D_A: 0.285 G_A: 0.377 cycle_A: 2.524 idt_A: 1.419 D_B: 0.269 G_B: 0.342 cycle_B: 2.989 idt_B: 1.115 
(epoch: 1, iters: 500, time: 1.385, data: 0.002) D_A: 0.228 G_A: 0.246 cycle_A: 1.194 idt_A: 0.932 D_B: 0.351 G_B: 0.460 cycle_B: 2.020 idt_B: 0.542 
(epoch: 1, iters: 600, time: 1.378, data: 0.002) D_A: 0.274 G_A: 0.401 cycle_A: 1.813 idt_A: 0.754 D_B: 0.210 G_B: 0.281 cycle_B: 1.609 idt_B: 0.593 
(epoch: 1, iters: 700, time: 1.380, data: 0.002) D_A: 0.176 G_A: 0.566 cycle_A: 4.510 idt_A: 0.984 D_B: 0.286 G_B: 0.387 cycle_B: 3.550 idt_B: 2.151 
(epoch: 1, iters: 800, time: 1.813, data: 0.002) D_A: 0.186 G_A: 0.289 cycle_A: 2.331 idt_A: 0.905 D_B: 0.316 G_B: 0.392 cycle_B: 2.839 idt_B: 1.031 
End of epoch 1 / 200 	 Time Taken: 1091 sec
learning rate = 0.0002000
(epoch: 2, iters: 100, time: 1.380, data: 0.226) D_A: 0.442 G_A: 0.188 cycle_A: 2.173 idt_A: 1.973 D_B: 0.465 G_B: 0.694 cycle_B: 3.757 idt_B: 0.653 
(epoch: 2, iters: 200, time: 1.371, data: 0.002) D_A: 0.259 G_A: 0.432 cycle_A: 1.280 idt_A: 1.637 D_B: 0.250 G_B: 0.659 cycle_B: 3.500 idt_B: 0.653 
(epoch: 2, iters: 300, time: 1.382, data: 0.002) D_A: 0.220 G_A: 0.228 cycle_A: 1.165 idt_A: 0.822 D_B: 0.320 G_B: 0.258 cycle_B: 1.818 idt_B: 0.748 
(epoch: 2, iters: 400, time: 1.925, data: 0.003) D_A: 0.167 G_A: 0.782 cycle_A: 1.175 idt_A: 0.675 D_B: 0.321 G_B: 0.826 cycle_B: 1.567 idt_B: 0.547 
(epoch: 2, iters: 500, time: 1.381, data: 0.002) D_A: 0.331 G_A: 0.716 cycle_A: 2.069 idt_A: 1.064 D_B: 0.082 G_B: 0.576 cycle_B: 2.547 idt_B: 1.368 
(epoch: 2, iters: 600, time: 1.381, data: 0.002) D_A: 0.300 G_A: 0.511 cycle_A: 1.407 idt_A: 0.691 D_B: 0.314 G_B: 0.169 cycle_B: 1.321 idt_B: 0.513 
(epoch: 2, iters: 700, time: 1.379, data: 0.002) D_A: 0.343 G_A: 0.217 cycle_A: 1.568 idt_A: 0.708 D_B: 0.387 G_B: 0.275 cycle_B: 1.463 idt_B: 0.560 
(epoch: 2, iters: 800, time: 1.800, data: 0.002) D_A: 0.225 G_A: 0.459 cycle_A: 1.438 idt_A: 0.653 D_B: 0.199 G_B: 0.546 cycle_B: 1.141 idt_B: 0.842 
End of epoch 2 / 200 	 Time Taken: 1090 sec
learning rate = 0.0002000
(epoch: 3, iters: 100, time: 1.379, data: 0.209) D_A: 0.192 G_A: 0.720 cycle_A: 0.985 idt_A: 0.958 D_B: 0.138 G_B: 0.769 cycle_B: 2.102 idt_B: 0.474 
(epoch: 3, iters: 200, time: 1.367, data: 0.001) D_A: 0.126 G_A: 0.472 cycle_A: 1.405 idt_A: 1.084 D_B: 0.188 G_B: 0.456 cycle_B: 2.186 idt_B: 0.490 
(epoch: 3, iters: 300, time: 1.381, data: 0.002) D_A: 0.099 G_A: 0.974 cycle_A: 2.370 idt_A: 0.997 D_B: 0.290 G_B: 0.178 cycle_B: 2.239 idt_B: 0.611 
(epoch: 3, iters: 400, time: 1.960, data: 0.002) D_A: 0.133 G_A: 0.350 cycle_A: 2.184 idt_A: 1.326 D_B: 0.075 G_B: 0.978 cycle_B: 3.424 idt_B: 1.027 
(epoch: 3, iters: 500, time: 1.375, data: 0.003) D_A: 0.141 G_A: 0.585 cycle_A: 1.393 idt_A: 0.810 D_B: 0.174 G_B: 0.378 cycle_B: 2.043 idt_B: 0.674 
(epoch: 3, iters: 600, time: 1.384, data: 0.002) D_A: 0.054 G_A: 0.673 cycle_A: 1.043 idt_A: 0.920 D_B: 0.100 G_B: 0.577 cycle_B: 1.904 idt_B: 0.518 
(epoch: 3, iters: 700, time: 1.378, data: 0.002) D_A: 0.513 G_A: 0.524 cycle_A: 1.620 idt_A: 1.021 D_B: 0.143 G_B: 0.377 cycle_B: 2.166 idt_B: 0.816 
(epoch: 3, iters: 800, time: 1.848, data: 0.002) D_A: 0.441 G_A: 0.109 cycle_A: 2.368 idt_A: 0.574 D_B: 0.183 G_B: 0.396 cycle_B: 1.254 idt_B: 1.228 
End of epoch 3 / 200 	 Time Taken: 1090 sec
learning rate = 0.0002000
(epoch: 4, iters: 100, time: 1.382, data: 0.204) D_A: 0.363 G_A: 0.574 cycle_A: 3.156 idt_A: 0.894 D_B: 0.420 G_B: 0.176 cycle_B: 2.323 idt_B: 1.493 
(epoch: 4, iters: 200, time: 1.377, data: 0.002) D_A: 0.171 G_A: 0.700 cycle_A: 1.001 idt_A: 1.264 D_B: 0.146 G_B: 0.271 cycle_B: 2.513 idt_B: 0.680 
(epoch: 4, iters: 300, time: 1.382, data: 0.002) D_A: 0.102 G_A: 0.585 cycle_A: 1.905 idt_A: 0.598 D_B: 0.234 G_B: 0.153 cycle_B: 1.526 idt_B: 0.584 
(epoch: 4, iters: 400, time: 1.960, data: 0.002) D_A: 0.264 G_A: 0.213 cycle_A: 1.265 idt_A: 0.664 D_B: 0.096 G_B: 0.850 cycle_B: 1.409 idt_B: 0.533 
(epoch: 4, iters: 500, time: 1.379, data: 0.002) D_A: 0.595 G_A: 0.658 cycle_A: 1.193 idt_A: 0.868 D_B: 0.266 G_B: 0.014 cycle_B: 1.870 idt_B: 0.519 
(epoch: 4, iters: 600, time: 1.375, data: 0.002) D_A: 0.104 G_A: 1.213 cycle_A: 1.745 idt_A: 1.044 D_B: 0.338 G_B: 0.129 cycle_B: 2.087 idt_B: 0.893 
(epoch: 4, iters: 700, time: 1.375, data: 0.002) D_A: 0.188 G_A: 0.818 cycle_A: 1.038 idt_A: 0.607 D_B: 0.105 G_B: 0.382 cycle_B: 1.165 idt_B: 0.443 
(epoch: 4, iters: 800, time: 1.808, data: 0.002) D_A: 0.191 G_A: 0.199 cycle_A: 1.596 idt_A: 0.686 D_B: 0.246 G_B: 1.415 cycle_B: 1.797 idt_B: 0.771 
End of epoch 4 / 200 	 Time Taken: 1090 sec
learning rate = 0.0002000
(epoch: 5, iters: 100, time: 1.377, data: 0.254) D_A: 0.148 G_A: 0.414 cycle_A: 1.038 idt_A: 0.872 D_B: 0.376 G_B: 0.504 cycle_B: 2.719 idt_B: 0.454 
(epoch: 5, iters: 200, time: 1.378, data: 0.002) D_A: 0.194 G_A: 0.261 cycle_A: 1.770 idt_A: 0.881 D_B: 0.091 G_B: 0.758 cycle_B: 2.650 idt_B: 0.628 
(epoch: 5, iters: 300, time: 1.373, data: 0.002) D_A: 0.134 G_A: 0.721 cycle_A: 1.485 idt_A: 0.980 D_B: 0.372 G_B: 0.213 cycle_B: 1.489 idt_B: 0.651 
(epoch: 5, iters: 400, time: 1.914, data: 0.002) D_A: 0.105 G_A: 0.146 cycle_A: 1.298 idt_A: 0.878 D_B: 0.241 G_B: 0.348 cycle_B: 2.003 idt_B: 0.431 
(epoch: 5, iters: 500, time: 1.373, data: 0.002) D_A: 0.229 G_A: 0.049 cycle_A: 2.049 idt_A: 0.621 D_B: 0.123 G_B: 0.229 cycle_B: 1.435 idt_B: 0.977 
(epoch: 5, iters: 600, time: 1.377, data: 0.002) D_A: 0.198 G_A: 0.595 cycle_A: 1.322 idt_A: 1.632 D_B: 0.089 G_B: 0.511 cycle_B: 3.386 idt_B: 0.755 
(epoch: 5, iters: 700, time: 1.370, data: 0.002) D_A: 0.306 G_A: 0.108 cycle_A: 2.370 idt_A: 1.363 D_B: 0.159 G_B: 0.421 cycle_B: 2.651 idt_B: 0.890 
(epoch: 5, iters: 800, time: 1.866, data: 0.002) D_A: 0.055 G_A: 1.580 cycle_A: 1.679 idt_A: 0.572 D_B: 0.029 G_B: 0.895 cycle_B: 1.533 idt_B: 0.615 
saving the model at the end of epoch 5, iters 4000
End of epoch 5 / 200 	 Time Taken: 1090 sec
learning rate = 0.0002000
(epoch: 6, iters: 100, time: 1.380, data: 0.193) D_A: 0.588 G_A: 0.033 cycle_A: 1.351 idt_A: 0.538 D_B: 0.343 G_B: 0.700 cycle_B: 1.236 idt_B: 0.418 
(epoch: 6, iters: 200, time: 1.381, data: 0.002) D_A: 0.215 G_A: 0.872 cycle_A: 1.473 idt_A: 0.559 D_B: 0.071 G_B: 0.571 cycle_B: 1.409 idt_B: 0.663 
(epoch: 6, iters: 300, time: 1.376, data: 0.002) D_A: 0.125 G_A: 0.464 cycle_A: 2.354 idt_A: 0.757 D_B: 0.108 G_B: 0.511 cycle_B: 1.728 idt_B: 1.238 
(epoch: 6, iters: 400, time: 1.835, data: 0.002) D_A: 0.209 G_A: 0.195 cycle_A: 0.944 idt_A: 0.405 D_B: 0.131 G_B: 0.303 cycle_B: 0.887 idt_B: 0.486 
(epoch: 6, iters: 500, time: 1.363, data: 0.002) D_A: 0.161 G_A: 0.327 cycle_A: 1.155 idt_A: 0.607 D_B: 0.232 G_B: 0.536 cycle_B: 1.140 idt_B: 0.599 
(epoch: 6, iters: 600, time: 1.380, data: 0.002) D_A: 0.033 G_A: 1.164 cycle_A: 1.008 idt_A: 0.610 D_B: 0.099 G_B: 0.651 cycle_B: 1.905 idt_B: 0.488 
(epoch: 6, iters: 700, time: 1.381, data: 0.002) D_A: 0.266 G_A: 0.238 cycle_A: 1.572 idt_A: 0.564 D_B: 0.522 G_B: 1.138 cycle_B: 1.654 idt_B: 0.850 
(epoch: 6, iters: 800, time: 1.830, data: 0.002) D_A: 0.163 G_A: 0.924 cycle_A: 1.466 idt_A: 0.647 D_B: 0.068 G_B: 1.143 cycle_B: 1.187 idt_B: 0.523 
End of epoch 6 / 200 	 Time Taken: 1089 sec
learning rate = 0.0002000
(epoch: 7, iters: 100, time: 1.368, data: 0.335) D_A: 0.296 G_A: 0.536 cycle_A: 1.958 idt_A: 0.944 D_B: 0.184 G_B: 0.362 cycle_B: 1.657 idt_B: 0.781 
(epoch: 7, iters: 200, time: 1.375, data: 0.002) D_A: 0.220 G_A: 0.160 cycle_A: 0.702 idt_A: 0.893 D_B: 0.200 G_B: 0.575 cycle_B: 2.204 idt_B: 0.345 
saving the latest model (epoch 7, total_iters 5000)
(epoch: 7, iters: 300, time: 1.386, data: 0.002) D_A: 0.450 G_A: 1.038 cycle_A: 0.791 idt_A: 0.745 D_B: 0.316 G_B: 0.254 cycle_B: 1.590 idt_B: 0.532 
(epoch: 7, iters: 400, time: 1.943, data: 0.003) D_A: 0.113 G_A: 0.655 cycle_A: 2.747 idt_A: 0.905 D_B: 0.180 G_B: 0.738 cycle_B: 2.312 idt_B: 1.315 
(epoch: 7, iters: 500, time: 1.372, data: 0.002) D_A: 0.059 G_A: 1.067 cycle_A: 1.945 idt_A: 0.478 D_B: 0.066 G_B: 0.557 cycle_B: 1.112 idt_B: 0.902 
(epoch: 7, iters: 600, time: 1.366, data: 0.002) D_A: 0.062 G_A: 0.649 cycle_A: 2.881 idt_A: 0.583 D_B: 0.133 G_B: 0.376 cycle_B: 1.107 idt_B: 0.748 
(epoch: 7, iters: 700, time: 1.381, data: 0.002) D_A: 0.110 G_A: 0.480 cycle_A: 2.129 idt_A: 0.498 D_B: 0.140 G_B: 0.368 cycle_B: 1.284 idt_B: 0.892 
(epoch: 7, iters: 800, time: 1.878, data: 0.002) D_A: 0.170 G_A: 0.278 cycle_A: 2.589 idt_A: 0.593 D_B: 0.112 G_B: 0.480 cycle_B: 1.622 idt_B: 0.816 
End of epoch 7 / 200 	 Time Taken: 1090 sec
learning rate = 0.0002000
(epoch: 8, iters: 100, time: 1.372, data: 0.337) D_A: 0.148 G_A: 0.662 cycle_A: 1.173 idt_A: 0.570 D_B: 0.086 G_B: 0.670 cycle_B: 1.218 idt_B: 0.550 
(epoch: 8, iters: 200, time: 1.381, data: 0.002) D_A: 0.101 G_A: 0.669 cycle_A: 1.372 idt_A: 0.649 D_B: 0.244 G_B: 0.702 cycle_B: 1.900 idt_B: 0.541 
(epoch: 8, iters: 300, time: 1.393, data: 0.002) D_A: 0.117 G_A: 1.083 cycle_A: 0.824 idt_A: 0.646 D_B: 0.055 G_B: 1.016 cycle_B: 1.944 idt_B: 0.503 
(epoch: 8, iters: 400, time: 1.992, data: 0.002) D_A: 0.172 G_A: 0.233 cycle_A: 1.857 idt_A: 0.897 D_B: 0.181 G_B: 0.643 cycle_B: 1.865 idt_B: 0.533 
(epoch: 8, iters: 500, time: 1.384, data: 0.002) D_A: 0.120 G_A: 1.012 cycle_A: 1.501 idt_A: 0.719 D_B: 0.112 G_B: 0.559 cycle_B: 1.767 idt_B: 0.625 
(epoch: 8, iters: 600, time: 1.380, data: 0.002) D_A: 0.152 G_A: 0.768 cycle_A: 1.347 idt_A: 0.901 D_B: 0.246 G_B: 0.135 cycle_B: 1.799 idt_B: 0.510 
(epoch: 8, iters: 700, time: 1.382, data: 0.002) D_A: 0.128 G_A: 0.673 cycle_A: 1.805 idt_A: 1.092 D_B: 0.196 G_B: 0.906 cycle_B: 2.024 idt_B: 0.615 
(epoch: 8, iters: 800, time: 1.869, data: 0.002) D_A: 0.338 G_A: 0.073 cycle_A: 1.326 idt_A: 0.718 D_B: 0.169 G_B: 0.187 cycle_B: 1.170 idt_B: 0.727 
End of epoch 8 / 200 	 Time Taken: 1090 sec
learning rate = 0.0002000
(epoch: 9, iters: 100, time: 1.382, data: 0.316) D_A: 0.247 G_A: 0.287 cycle_A: 1.157 idt_A: 0.439 D_B: 0.098 G_B: 0.651 cycle_B: 1.442 idt_B: 0.480 
(epoch: 9, iters: 200, time: 1.373, data: 0.002) D_A: 0.245 G_A: 1.329 cycle_A: 2.284 idt_A: 0.505 D_B: 0.115 G_B: 0.343 cycle_B: 0.993 idt_B: 0.920 
(epoch: 9, iters: 300, time: 1.367, data: 0.002) D_A: 0.027 G_A: 0.854 cycle_A: 1.237 idt_A: 0.789 D_B: 0.057 G_B: 0.764 cycle_B: 2.216 idt_B: 0.473 
(epoch: 9, iters: 400, time: 1.929, data: 0.002) D_A: 0.296 G_A: 0.309 cycle_A: 2.057 idt_A: 0.403 D_B: 0.479 G_B: 0.773 cycle_B: 1.126 idt_B: 1.004 
(epoch: 9, iters: 500, time: 1.376, data: 0.002) D_A: 0.331 G_A: 1.082 cycle_A: 1.316 idt_A: 0.831 D_B: 0.167 G_B: 0.385 cycle_B: 1.623 idt_B: 0.444 
(epoch: 9, iters: 600, time: 1.386, data: 0.002) D_A: 0.096 G_A: 1.107 cycle_A: 1.116 idt_A: 0.505 D_B: 0.213 G_B: 0.596 cycle_B: 1.292 idt_B: 0.433 
(epoch: 9, iters: 700, time: 1.383, data: 0.002) D_A: 0.080 G_A: 0.622 cycle_A: 1.055 idt_A: 0.451 D_B: 0.146 G_B: 0.295 cycle_B: 1.469 idt_B: 0.353 
(epoch: 9, iters: 800, time: 1.927, data: 0.002) D_A: 0.171 G_A: 0.460 cycle_A: 0.995 idt_A: 1.238 D_B: 0.396 G_B: 0.364 cycle_B: 2.182 idt_B: 0.562 
End of epoch 9 / 200 	 Time Taken: 1089 sec
learning rate = 0.0002000
(epoch: 10, iters: 100, time: 1.384, data: 0.299) D_A: 0.139 G_A: 0.270 cycle_A: 0.829 idt_A: 0.437 D_B: 0.287 G_B: 0.146 cycle_B: 1.213 idt_B: 0.355 
(epoch: 10, iters: 200, time: 1.381, data: 0.002) D_A: 0.215 G_A: 0.826 cycle_A: 1.663 idt_A: 0.563 D_B: 0.278 G_B: 0.296 cycle_B: 1.547 idt_B: 0.643 
(epoch: 10, iters: 300, time: 1.382, data: 0.002) D_A: 0.154 G_A: 0.363 cycle_A: 0.976 idt_A: 0.854 D_B: 0.176 G_B: 0.335 cycle_B: 2.181 idt_B: 0.433 
(epoch: 10, iters: 400, time: 1.910, data: 0.003) D_A: 0.259 G_A: 0.129 cycle_A: 1.958 idt_A: 0.478 D_B: 0.279 G_B: 0.361 cycle_B: 1.105 idt_B: 0.953 
(epoch: 10, iters: 500, time: 1.376, data: 0.002) D_A: 0.106 G_A: 0.618 cycle_A: 1.278 idt_A: 0.390 D_B: 0.232 G_B: 0.768 cycle_B: 0.970 idt_B: 0.637 
(epoch: 10, iters: 600, time: 1.376, data: 0.002) D_A: 0.133 G_A: 0.450 cycle_A: 0.754 idt_A: 0.644 D_B: 0.178 G_B: 0.593 cycle_B: 1.085 idt_B: 0.414 
(epoch: 10, iters: 700, time: 1.377, data: 0.003) D_A: 0.217 G_A: 1.498 cycle_A: 0.996 idt_A: 0.788 D_B: 0.070 G_B: 0.625 cycle_B: 1.705 idt_B: 0.453 
(epoch: 10, iters: 800, time: 1.929, data: 0.002) D_A: 0.060 G_A: 0.687 cycle_A: 1.341 idt_A: 0.808 D_B: 0.084 G_B: 0.231 cycle_B: 1.433 idt_B: 0.772 
saving the model at the end of epoch 10, iters 8000
End of epoch 10 / 200 	 Time Taken: 1090 sec
learning rate = 0.0002000
(epoch: 11, iters: 100, time: 1.368, data: 0.186) D_A: 0.049 G_A: 1.189 cycle_A: 0.742 idt_A: 0.819 D_B: 0.140 G_B: 0.640 cycle_B: 2.193 idt_B: 0.433 
(epoch: 11, iters: 200, time: 1.377, data: 0.003) D_A: 0.137 G_A: 1.091 cycle_A: 0.980 idt_A: 0.759 D_B: 0.148 G_B: 0.492 cycle_B: 1.879 idt_B: 0.445 
(epoch: 11, iters: 300, time: 1.376, data: 0.002) D_A: 0.125 G_A: 0.469 cycle_A: 0.765 idt_A: 0.438 D_B: 0.204 G_B: 0.151 cycle_B: 1.399 idt_B: 0.492 
(epoch: 11, iters: 400, time: 1.918, data: 0.002) D_A: 0.047 G_A: 0.513 cycle_A: 0.921 idt_A: 0.570 D_B: 0.130 G_B: 0.472 cycle_B: 1.246 idt_B: 0.407 
(epoch: 11, iters: 500, time: 1.380, data: 0.002) D_A: 0.234 G_A: 1.310 cycle_A: 1.415 idt_A: 0.541 D_B: 0.491 G_B: 0.178 cycle_B: 0.946 idt_B: 0.458 
(epoch: 11, iters: 600, time: 1.379, data: 0.002) D_A: 0.248 G_A: 0.195 cycle_A: 1.783 idt_A: 1.146 D_B: 0.193 G_B: 0.716 cycle_B: 1.894 idt_B: 0.925 
(epoch: 11, iters: 700, time: 1.374, data: 0.002) D_A: 0.233 G_A: 0.137 cycle_A: 2.126 idt_A: 0.641 D_B: 0.294 G_B: 0.644 cycle_B: 1.410 idt_B: 0.607 
(epoch: 11, iters: 800, time: 2.013, data: 0.002) D_A: 0.089 G_A: 0.513 cycle_A: 1.248 idt_A: 0.544 D_B: 0.343 G_B: 0.663 cycle_B: 1.201 idt_B: 0.459 
End of epoch 11 / 200 	 Time Taken: 1090 sec
learning rate = 0.0002000
(epoch: 12, iters: 100, time: 1.376, data: 0.273) D_A: 0.082 G_A: 0.464 cycle_A: 1.540 idt_A: 1.401 D_B: 0.156 G_B: 0.618 cycle_B: 3.354 idt_B: 0.749 
(epoch: 12, iters: 200, time: 1.371, data: 0.002) D_A: 0.055 G_A: 0.289 cycle_A: 2.152 idt_A: 0.414 D_B: 0.102 G_B: 0.463 cycle_B: 0.993 idt_B: 0.941 
(epoch: 12, iters: 300, time: 1.373, data: 0.002) D_A: 0.205 G_A: 0.319 cycle_A: 1.614 idt_A: 0.857 D_B: 0.124 G_B: 0.384 cycle_B: 1.390 idt_B: 0.562 
(epoch: 12, iters: 400, time: 1.976, data: 0.002) D_A: 0.210 G_A: 0.268 cycle_A: 0.956 idt_A: 1.121 D_B: 0.158 G_B: 0.337 cycle_B: 3.126 idt_B: 0.450 
(epoch: 12, iters: 500, time: 1.376, data: 0.002) D_A: 0.057 G_A: 0.618 cycle_A: 1.052 idt_A: 0.849 D_B: 0.250 G_B: 0.197 cycle_B: 1.864 idt_B: 0.405 
(epoch: 12, iters: 600, time: 1.372, data: 0.002) D_A: 0.071 G_A: 0.845 cycle_A: 0.997 idt_A: 0.605 D_B: 0.191 G_B: 0.262 cycle_B: 1.422 idt_B: 0.619 
(epoch: 12, iters: 700, time: 1.379, data: 0.002) D_A: 0.063 G_A: 0.700 cycle_A: 0.972 idt_A: 0.600 D_B: 0.177 G_B: 0.211 cycle_B: 1.157 idt_B: 0.543 
(epoch: 12, iters: 800, time: 2.141, data: 0.002) D_A: 0.051 G_A: 1.148 cycle_A: 1.257 idt_A: 0.923 D_B: 0.051 G_B: 0.659 cycle_B: 2.514 idt_B: 0.480 
End of epoch 12 / 200 	 Time Taken: 1091 sec
learning rate = 0.0002000
(epoch: 13, iters: 100, time: 1.378, data: 0.334) D_A: 0.145 G_A: 0.110 cycle_A: 0.948 idt_A: 0.383 D_B: 0.630 G_B: 1.857 cycle_B: 0.972 idt_B: 0.430 
(epoch: 13, iters: 200, time: 1.377, data: 0.002) D_A: 0.261 G_A: 0.994 cycle_A: 1.818 idt_A: 0.506 D_B: 0.085 G_B: 0.291 cycle_B: 1.215 idt_B: 0.844 
(epoch: 13, iters: 300, time: 1.386, data: 0.002) D_A: 0.123 G_A: 0.358 cycle_A: 1.085 idt_A: 0.703 D_B: 0.278 G_B: 0.791 cycle_B: 1.561 idt_B: 0.631 
(epoch: 13, iters: 400, time: 1.980, data: 0.002) D_A: 0.078 G_A: 0.307 cycle_A: 0.855 idt_A: 0.473 D_B: 0.165 G_B: 0.738 cycle_B: 0.828 idt_B: 0.360 
saving the latest model (epoch 13, total_iters 10000)
(epoch: 13, iters: 500, time: 1.369, data: 0.002) D_A: 0.090 G_A: 0.532 cycle_A: 1.816 idt_A: 0.558 D_B: 0.074 G_B: 1.180 cycle_B: 1.494 idt_B: 0.763 
(epoch: 13, iters: 600, time: 1.381, data: 0.002) D_A: 0.295 G_A: 0.228 cycle_A: 0.894 idt_A: 0.467 D_B: 0.280 G_B: 0.506 cycle_B: 0.931 idt_B: 0.356 
(epoch: 13, iters: 700, time: 1.373, data: 0.002) D_A: 0.687 G_A: 0.843 cycle_A: 1.436 idt_A: 0.838 D_B: 0.152 G_B: 0.307 cycle_B: 1.540 idt_B: 0.605 
(epoch: 13, iters: 800, time: 1.908, data: 0.002) D_A: 0.446 G_A: 0.427 cycle_A: 1.394 idt_A: 1.118 D_B: 0.135 G_B: 0.156 cycle_B: 2.196 idt_B: 0.291 
End of epoch 13 / 200 	 Time Taken: 1090 sec
learning rate = 0.0002000
(epoch: 14, iters: 100, time: 1.374, data: 0.261) D_A: 0.310 G_A: 0.241 cycle_A: 1.517 idt_A: 1.216 D_B: 0.390 G_B: 0.191 cycle_B: 2.147 idt_B: 1.426 
(epoch: 14, iters: 200, time: 1.367, data: 0.002) D_A: 0.550 G_A: 1.456 cycle_A: 1.045 idt_A: 0.476 D_B: 0.244 G_B: 0.499 cycle_B: 1.030 idt_B: 0.398 
(epoch: 14, iters: 300, time: 1.376, data: 0.002) D_A: 0.166 G_A: 0.414 cycle_A: 0.743 idt_A: 0.585 D_B: 0.111 G_B: 0.699 cycle_B: 1.348 idt_B: 0.381 
(epoch: 14, iters: 400, time: 1.934, data: 0.002) D_A: 0.188 G_A: 0.322 cycle_A: 1.713 idt_A: 0.750 D_B: 0.057 G_B: 0.741 cycle_B: 1.578 idt_B: 0.635 
(epoch: 14, iters: 500, time: 1.378, data: 0.003) D_A: 0.085 G_A: 0.388 cycle_A: 1.184 idt_A: 0.587 D_B: 0.084 G_B: 0.484 cycle_B: 2.026 idt_B: 0.545 
(epoch: 14, iters: 600, time: 1.376, data: 0.002) D_A: 0.237 G_A: 0.140 cycle_A: 1.133 idt_A: 0.395 D_B: 0.101 G_B: 0.477 cycle_B: 0.772 idt_B: 0.699 
(epoch: 14, iters: 700, time: 1.371, data: 0.002) D_A: 0.241 G_A: 0.620 cycle_A: 1.348 idt_A: 0.548 D_B: 0.029 G_B: 0.368 cycle_B: 1.154 idt_B: 0.484 
(epoch: 14, iters: 800, time: 1.994, data: 0.002) D_A: 0.102 G_A: 0.496 cycle_A: 0.798 idt_A: 0.625 D_B: 0.133 G_B: 0.615 cycle_B: 1.656 idt_B: 0.572 
End of epoch 14 / 200 	 Time Taken: 1091 sec
learning rate = 0.0002000
(epoch: 15, iters: 100, time: 1.367, data: 0.315) D_A: 0.128 G_A: 0.456 cycle_A: 0.885 idt_A: 2.426 D_B: 0.265 G_B: 0.157 cycle_B: 4.389 idt_B: 0.389 
(epoch: 15, iters: 200, time: 1.372, data: 0.002) D_A: 0.310 G_A: 1.310 cycle_A: 1.142 idt_A: 0.749 D_B: 0.231 G_B: 0.335 cycle_B: 1.587 idt_B: 0.739 
(epoch: 15, iters: 300, time: 1.371, data: 0.002) D_A: 0.329 G_A: 0.414 cycle_A: 0.885 idt_A: 0.571 D_B: 0.320 G_B: 0.090 cycle_B: 1.274 idt_B: 0.328 
(epoch: 15, iters: 400, time: 2.164, data: 0.002) D_A: 0.298 G_A: 0.139 cycle_A: 2.321 idt_A: 0.451 D_B: 0.087 G_B: 1.132 cycle_B: 1.082 idt_B: 1.140 
(epoch: 15, iters: 500, time: 1.373, data: 0.002) D_A: 0.205 G_A: 1.402 cycle_A: 1.051 idt_A: 0.774 D_B: 0.116 G_B: 0.502 cycle_B: 1.561 idt_B: 0.834 
(epoch: 15, iters: 600, time: 1.374, data: 0.002) D_A: 0.065 G_A: 0.804 cycle_A: 1.324 idt_A: 0.415 D_B: 0.052 G_B: 0.426 cycle_B: 0.920 idt_B: 0.450 
(epoch: 15, iters: 700, time: 1.375, data: 0.002) D_A: 0.158 G_A: 0.281 cycle_A: 1.571 idt_A: 0.424 D_B: 0.133 G_B: 0.399 cycle_B: 1.024 idt_B: 0.963 
(epoch: 15, iters: 800, time: 2.074, data: 0.002) D_A: 0.182 G_A: 0.250 cycle_A: 0.779 idt_A: 0.517 D_B: 0.125 G_B: 0.693 cycle_B: 1.306 idt_B: 0.414 
saving the model at the end of epoch 15, iters 12000
End of epoch 15 / 200 	 Time Taken: 1092 sec
learning rate = 0.0002000
(epoch: 16, iters: 100, time: 1.373, data: 0.171) D_A: 0.035 G_A: 0.445 cycle_A: 1.203 idt_A: 0.557 D_B: 0.048 G_B: 1.078 cycle_B: 1.348 idt_B: 0.243 
(epoch: 16, iters: 200, time: 1.385, data: 0.002) D_A: 0.222 G_A: 0.760 cycle_A: 0.858 idt_A: 0.831 D_B: 0.123 G_B: 0.950 cycle_B: 1.691 idt_B: 0.415 
(epoch: 16, iters: 300, time: 1.377, data: 0.003) D_A: 0.105 G_A: 0.496 cycle_A: 1.023 idt_A: 0.516 D_B: 0.126 G_B: 0.926 cycle_B: 1.246 idt_B: 0.264 
(epoch: 16, iters: 400, time: 2.010, data: 0.002) D_A: 0.206 G_A: 0.781 cycle_A: 0.893 idt_A: 0.527 D_B: 0.133 G_B: 0.592 cycle_B: 1.184 idt_B: 0.412 
(epoch: 16, iters: 500, time: 1.381, data: 0.002) D_A: 0.239 G_A: 1.286 cycle_A: 1.055 idt_A: 0.534 D_B: 0.218 G_B: 0.207 cycle_B: 0.992 idt_B: 0.375 
(epoch: 16, iters: 600, time: 1.375, data: 0.002) D_A: 0.578 G_A: 0.532 cycle_A: 0.913 idt_A: 0.876 D_B: 0.262 G_B: 0.162 cycle_B: 1.351 idt_B: 0.344 
(epoch: 16, iters: 700, time: 1.379, data: 0.002) D_A: 0.102 G_A: 0.906 cycle_A: 1.024 idt_A: 0.371 D_B: 0.037 G_B: 1.005 cycle_B: 0.810 idt_B: 0.469 
(epoch: 16, iters: 800, time: 2.123, data: 0.002) D_A: 0.346 G_A: 0.752 cycle_A: 0.668 idt_A: 0.837 D_B: 0.216 G_B: 0.200 cycle_B: 1.747 idt_B: 0.258 
End of epoch 16 / 200 	 Time Taken: 1091 sec
learning rate = 0.0002000
(epoch: 17, iters: 100, time: 1.381, data: 0.273) D_A: 0.085 G_A: 0.049 cycle_A: 1.223 idt_A: 0.723 D_B: 0.184 G_B: 0.567 cycle_B: 1.395 idt_B: 0.382 
(epoch: 17, iters: 200, time: 1.379, data: 0.002) D_A: 0.106 G_A: 0.169 cycle_A: 0.781 idt_A: 0.406 D_B: 0.091 G_B: 0.768 cycle_B: 0.842 idt_B: 0.466 
(epoch: 17, iters: 300, time: 1.380, data: 0.002) D_A: 0.350 G_A: 0.769 cycle_A: 1.265 idt_A: 0.558 D_B: 0.164 G_B: 0.506 cycle_B: 1.360 idt_B: 0.402 
(epoch: 17, iters: 400, time: 3.074, data: 0.002) D_A: 0.413 G_A: 0.662 cycle_A: 1.218 idt_A: 0.546 D_B: 0.072 G_B: 0.392 cycle_B: 1.163 idt_B: 0.367 
(epoch: 17, iters: 500, time: 1.379, data: 0.002) D_A: 0.023 G_A: 0.391 cycle_A: 1.006 idt_A: 0.475 D_B: 0.179 G_B: 0.724 cycle_B: 1.397 idt_B: 0.449 
(epoch: 17, iters: 600, time: 1.372, data: 0.002) D_A: 0.286 G_A: 0.192 cycle_A: 0.974 idt_A: 1.193 D_B: 0.452 G_B: 0.540 cycle_B: 1.649 idt_B: 0.540 
(epoch: 17, iters: 700, time: 1.377, data: 0.002) D_A: 0.309 G_A: 0.422 cycle_A: 0.886 idt_A: 0.549 D_B: 0.383 G_B: 0.087 cycle_B: 1.353 idt_B: 0.482 
(epoch: 17, iters: 800, time: 1.993, data: 0.002) D_A: 0.074 G_A: 0.647 cycle_A: 0.792 idt_A: 0.506 D_B: 0.089 G_B: 0.480 cycle_B: 1.066 idt_B: 0.436 
End of epoch 17 / 200 	 Time Taken: 1093 sec
learning rate = 0.0002000
(epoch: 18, iters: 100, time: 1.365, data: 0.254) D_A: 0.042 G_A: 0.757 cycle_A: 0.872 idt_A: 0.497 D_B: 0.048 G_B: 1.276 cycle_B: 1.445 idt_B: 0.344 
(epoch: 18, iters: 200, time: 1.385, data: 0.002) D_A: 0.077 G_A: 0.656 cycle_A: 0.806 idt_A: 0.446 D_B: 0.252 G_B: 0.684 cycle_B: 1.372 idt_B: 0.400 
(epoch: 18, iters: 300, time: 1.373, data: 0.003) D_A: 0.189 G_A: 1.041 cycle_A: 0.871 idt_A: 0.757 D_B: 0.183 G_B: 0.182 cycle_B: 1.717 idt_B: 0.453 
(epoch: 18, iters: 400, time: 2.209, data: 0.002) D_A: 0.079 G_A: 0.691 cycle_A: 1.009 idt_A: 0.647 D_B: 0.042 G_B: 0.928 cycle_B: 1.093 idt_B: 0.420 
(epoch: 18, iters: 500, time: 1.377, data: 0.002) D_A: 0.039 G_A: 1.080 cycle_A: 1.258 idt_A: 0.443 D_B: 0.086 G_B: 0.518 cycle_B: 1.415 idt_B: 0.453 
(epoch: 18, iters: 600, time: 1.382, data: 0.002) D_A: 0.099 G_A: 0.476 cycle_A: 0.766 idt_A: 0.975 D_B: 0.148 G_B: 0.911 cycle_B: 2.132 idt_B: 0.315 
(epoch: 18, iters: 700, time: 1.377, data: 0.002) D_A: 0.056 G_A: 0.335 cycle_A: 0.824 idt_A: 0.515 D_B: 0.192 G_B: 1.056 cycle_B: 1.410 idt_B: 0.370 
(epoch: 18, iters: 800, time: 2.003, data: 0.002) D_A: 0.098 G_A: 1.035 cycle_A: 0.898 idt_A: 1.099 D_B: 0.163 G_B: 0.438 cycle_B: 2.219 idt_B: 0.616 
End of epoch 18 / 200 	 Time Taken: 1092 sec
learning rate = 0.0002000
